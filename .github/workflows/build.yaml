name: Build C++ Projects

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential pkg-config libgtk-3-dev libvte-2.91-dev

      - name: Compile projects with summary
        shell: bash
        run: |
          set -eu -o pipefail

          # Clean bin folder
          rm -rf bin
          mkdir -p bin

          SUCCEEDED=""
          FAILED=""

          # Loop over top-level directories (exclude .github, bin, .git)
          for dir in $(find . -maxdepth 1 -mindepth 1 -type d | sed 's|^\./||'); do
            [ "$dir" = ".github" ] && continue
            [ "$dir" = "bin" ] && continue
            [ "$dir" = ".git" ] && continue

            project=$(basename "$dir")

            # Check if directory contains any .cpp files
            CPP_FILES=$(find "$dir" -type f -name "*.cpp" 2>/dev/null || true)
            if [ -z "$CPP_FILES" ] && [ ! -f "$dir/Makefile" ]; then
              echo "Skipping $project (no .cpp files or Makefile found)"
              continue
            fi

            mkdir -p "bin/$project"
            echo "=== Processing project: $project ==="

            if [ -f "$dir/Makefile" ]; then
              echo "Building $project using Makefile..."
              if make -C "$dir"; then
                # Move executables to bin/$project
                find "$dir" -maxdepth 1 -type f -executable -exec mv {} "bin/$project/" \;
                SUCCEEDED="$SUCCEEDED $project"
              else
                echo "Make failed for $project"
                FAILED="$FAILED $project"
              fi
            else
              OUT_BIN="bin/$project/$project"
              echo "Compiling $project from source..."
              if g++ -std=c++17 -Wall -Iinclude $CPP_FILES -o "$OUT_BIN" $(pkg-config --cflags --libs gtk+-3.0 vte-2.91); then
                SUCCEEDED="$SUCCEEDED $project"
              else
                echo "g++ failed for $project"
                FAILED="$FAILED $project"
              fi
            fi
          done

          echo
          echo "=== Build Summary ==="
          if [ -n "$SUCCEEDED" ]; then
            echo -e "\e[32mSucceeded projects:$SUCCEEDED\e[0m"
          else
            echo -e "\e[33mNo projects succeeded.\e[0m"
          fi

          if [ -n "$FAILED" ]; then
            echo -e "\e[31mFailed projects:$FAILED\e[0m"
            exit 1
          fi

          echo
          echo "Built projects folder structure:"
          ls -R bin || true

      - name: Upload compiled binaries
        uses: actions/upload-artifact@v4
        with:
          name: compiled-projects-${{ github.run_number }}
          path: bin
          if-no-files-found: error
