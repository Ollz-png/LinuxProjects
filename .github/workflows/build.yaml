name: Advanced Build C++ Projects

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  VERBOSE_BUILD: "false"  # set true to see full g++/make output
  FAST_FAIL: "false"      # set true to stop on first failure

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install base dependencies
        run: |
          echo "::group::üì¶ Installing base dependencies"
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            libgtk-3-dev \
            libvte-2.91-dev \
            libgtksourceview-4-dev
          echo "::endgroup::"

      - name: Install dependencies from Makefiles
        run: |
          set -eu
          echo "::group::üîç Scanning Makefiles for pkg-config modules"
          MODULES=$(grep -h -o "pkg-config[^)]*)" $(find . -name Makefile) \
            | sed -E 's/.*pkg-config[^ ]* (.*)\)/\1/' \
            | tr ' ' '\n' | sort -u || true
          if [ -z "$MODULES" ]; then
            echo "‚ö†Ô∏è No pkg-config modules detected"
            echo "::endgroup::"
            exit 0
          fi
          echo "üì¶ Detected pkg-config modules:"
          for m in $MODULES; do echo "  - $m"; done
          echo "::endgroup::"

          PKGS=()
          for m in $MODULES; do
            case "$m" in
              gtk+-3.0) PKGS+=("libgtk-3-dev") ;;
              vte-2.91) PKGS+=("libvte-2.91-dev") ;;
              gtksourceview-4) PKGS+=("libgtksourceview-4-dev") ;;
              *) echo "‚ö†Ô∏è Unknown module: $m (no apt mapping)" ;;
            esac
          done

          if [ ${#PKGS[@]} -gt 0 ]; then
            echo "::group::üì¶ Installing extra packages"
            echo "Will install: ${PKGS[*]}"
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends "${PKGS[@]}"
            echo "::endgroup::"
          fi

      - name: Compile projects with summary
        shell: bash
        run: |
          set -eu -o pipefail
          mkdir -p bin logs
          REPORT="build-report.txt"
          echo "üìä Advanced Build Report - $(date)" > "$REPORT"
          echo "" >> "$REPORT"

          SUCCEEDED=() FAILED=() SKIPPED=()
          RED="\033[0;31m" GREEN="\033[0;32m" YELLOW="\033[0;33m" BLUE="\033[0;34m" NC="\033[0m"

          while IFS= read -r -d '' dir; do
            dir="${dir#./}"
            [[ "$dir" = ".github" || "$dir" = "bin" || "$dir" = ".git" ]] && continue
            project="$dir"
            PROJECT_LOG="logs/${project}.log"
            mkdir -p "logs/$project"
            echo "::group::üî® Building project: $project"

            mapfile -d '' -t CPP_FILES < <(find "$dir" -type f -name '*.cpp' -print0 || true)
            if [ "${#CPP_FILES[@]}" -eq 0 ] && [ ! -f "$dir/Makefile" ]; then
              echo -e "‚ö†Ô∏è ${YELLOW}Skipping${NC}: $project" | tee -a "$REPORT" > "$PROJECT_LOG"
              SKIPPED+=("$project")
              echo "::endgroup::"
              continue
            fi

            mkdir -p "bin/$project"
            START_TIME=$(date +%s.%N)

            if [ -f "$dir/Makefile" ]; then
              echo "üõ†Ô∏è Building with Makefile..." | tee -a "$PROJECT_LOG"
              if [ "$VERBOSE_BUILD" = "true" ]; then
                make -C "$dir" 2>&1 | tee -a "$PROJECT_LOG"
                MAKE_STATUS=${PIPESTATUS[0]}
              else
                make -C "$dir" >/dev/null 2>&1
                MAKE_STATUS=$?
              fi

              if [ $MAKE_STATUS -eq 0 ]; then
                find "$dir" -maxdepth 1 -type f -executable -exec mv -t "bin/$project" -- {} + 2>/dev/null || true
                echo -e "‚úÖ ${GREEN}Build succeeded${NC}: $project" | tee -a "$REPORT" "$PROJECT_LOG"
                SUCCEEDED+=("$project")
              else
                echo -e "‚ùå ${RED}Build failed${NC}: $project" | tee -a "$REPORT" "$PROJECT_LOG"
                FAILED+=("$project")
                [ "$FAST_FAIL" = "true" ] && exit 1
              fi
            else
              echo "üõ†Ô∏è Compiling sources directly..." | tee -a "$PROJECT_LOG"
              OUT_BIN="bin/$project/$project"
              readarray -d '' -t HEADER_DIRS < <(find "$dir" -type f \( -name '*.h' -o -name '*.hpp' \) -printf '%h\0' 2>/dev/null | sort -uz || true)

              INCLUDES_ORDER=()
              add_if_missing() { local candidate="$1"; for e in "${INCLUDES_ORDER[@]}"; do [ "$e" = "$candidate" ] && return 0; done; INCLUDES_ORDER+=("$candidate"); }
              [ -d "$dir/include" ] && add_if_missing "$dir/include"
              [ -d "./include" ] && add_if_missing "$(realpath -m ./include)"
              for hdr in "${HEADER_DIRS[@]}"; do [ -z "$hdr" ] && continue; add_if_missing "$(realpath -m "$hdr")"; done
              INCLUDES_FLAGS=(); for p in "${INCLUDES_ORDER[@]}"; do INCLUDES_FLAGS+=("-I" "$p"); done

              if [ "$VERBOSE_BUILD" = "true" ]; then
                g++ -std=c++17 -Wall "${INCLUDES_FLAGS[@]}" "${CPP_FILES[@]}" -o "$OUT_BIN" $(pkg-config --cflags --libs gtk+-3.0 vte-2.91 gtksourceview-4) 2>&1 | tee -a "$PROJECT_LOG"
                GCC_STATUS=${PIPESTATUS[0]}
              else
                g++ -std=c++17 -Wall "${INCLUDES_FLAGS[@]}" "${CPP_FILES[@]}" -o "$OUT_BIN" $(pkg-config --cflags --libs gtk+-3.0 vte-2.91 gtksourceview-4) >/dev/null 2>&1
                GCC_STATUS=$?
              fi

              if [ $GCC_STATUS -eq 0 ]; then
                echo -e "‚úÖ ${GREEN}Compiled successfully${NC}: $project" | tee -a "$REPORT" "$PROJECT_LOG"
                SUCCEEDED+=("$project")
              else
                echo -e "‚ùå ${RED}g++ compilation failed${NC}: $project" | tee -a "$REPORT" "$PROJECT_LOG"
                FAILED+=("$project")
                [ "$FAST_FAIL" = "true" ] && exit 1
              fi
            fi

            END_TIME=$(date +%s.%N)
            DURATION=$(echo "$END_TIME - $START_TIME" | bc)
            echo "‚è± Build time: ${DURATION}s" | tee -a "$REPORT" "$PROJECT_LOG"
            echo "::endgroup::"

          done < <(find . -maxdepth 1 -mindepth 1 -type d -print0)

          # Summary
          echo "" >> "$REPORT"
          echo "=== Build Summary ===" >> "$REPORT"
          [ ${#SUCCEEDED[@]} -gt 0 ] && echo "‚úÖ Succeeded: ${SUCCEEDED[*]}" >> "$REPORT"
          [ ${#FAILED[@]} -gt 0 ] && echo "‚ùå Failed: ${FAILED[*]}" >> "$REPORT"
          [ ${#SKIPPED[@]} -gt 0 ] && echo "‚ö†Ô∏è Skipped: ${SKIPPED[*]}" >> "$REPORT"

          # Pretty tree with size & timestamp
          echo "" >> "$REPORT"
          echo "üìÇ Built projects folder structure:" | tee -a "$REPORT"

          show_tree() {
            local dir="$1"
            local prefix="$2"
            local files=("$dir"/*)
            local count=${#files[@]}
            local i=0
            for f in "${files[@]}"; do
              ((i++))
              local connector="‚îú‚îÄ‚îÄ"
              local new_prefix="$prefix‚îÇ   "
              [ $i -eq $count ] && connector="‚îî‚îÄ‚îÄ" && new_prefix="$prefix    "
              if [ -d "$f" ]; then
                echo -e "${prefix}${connector} üìÅ ${BLUE}$(basename "$f")${NC}" | tee -a "$REPORT"
                show_tree "$f" "$new_prefix"
              else
                SIZE=$(du -h "$f" | cut -f1)
                DATE=$(date -r "$f" "+%Y-%m-%d %H:%M:%S")
                echo -e "${prefix}${connector} üìÑ $(basename "$f") (${SIZE}, $DATE)" | tee -a "$REPORT"
              fi
            done
          }

          [ -d bin ] && show_tree bin "" || echo "‚ö†Ô∏è No bin folder generated" | tee -a "$REPORT"

          [ ${#FAILED[@]} -gt 0 ] && exit 1

      - name: Upload compiled binaries
        uses: actions/upload-artifact@v4
        with:
          name: compiled-projects-${{ github.run_number }}
          path: bin
          if-no-files-found: error

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report-${{ github.run_number }}
          path: build-report.txt
          if-no-files-found: error

      - name: Upload individual project logs
        uses: actions/upload-artifact@v4
        with:
          name: project-logs-${{ github.run_number }}
          path: logs/
          if-no-files-found: ignore
