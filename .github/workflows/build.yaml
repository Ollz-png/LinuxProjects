name: Build C++ Projects

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install base build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential pkg-config

      - name: Compile projects with auto-detected packages
        shell: bash
        run: |
          set -eu -o pipefail

          # Map pkg-config modules â†’ Ubuntu dev packages
          declare -A PKG_MAP=(
            [gtk+-3.0]=libgtk-3-dev
            [vte-2.91]=libvte-2.91-dev
            [gtksourceview-3.0]=libgtksourceview-3.0-dev
          )

          SUCCEEDED=()
          FAILED=()

          mkdir -p bin

          # Top-level projects (ignore .github, bin, .git)
          while IFS= read -r -d '' dir; do
            dir="${dir#./}"
            [[ "$dir" = ".github" || "$dir" = "bin" || "$dir" = ".git" ]] && continue
            project="$dir"
            echo "=== Processing project: $project ==="

            # Find sources
            mapfile -t SRCFILES < <(find "$project" -type f -name '*.cpp')
            if [ ${#SRCFILES[@]} -eq 0 ] && [ ! -f "$project/Makefile" ]; then
              echo "Skipping $project (no sources or Makefile)"
              continue
            fi

            mkdir -p "bin/$project"

            if [ -f "$project/Makefile" ]; then
              echo "Building $project with Makefile..."
              if make -C "$project"; then
                find "$project" -maxdepth 1 -type f -executable \
                  -exec mv -t "bin/$project" {} + 2>/dev/null || true
                SUCCEEDED+=("$project")
              else
                echo "Make failed for $project"
                FAILED+=("$project")
              fi
              continue
            fi

            # Detect needed pkg-config modules from includes
            needed_pkgs=()
            for src in "${SRCFILES[@]}"; do
              if grep -qE '#\s*include\s*<gtk/gtk.h>' "$src"; then
                needed_pkgs+=("gtk+-3.0")
              fi
              if grep -qE '#\s*include\s*<vte/vte.h>' "$src"; then
                needed_pkgs+=("vte-2.91")
              fi
              if grep -qE '#\s*include\s*<gtksourceview/gtksource.h>' "$src"; then
                needed_pkgs+=("gtksourceview-3.0")
              fi
            done
            needed_pkgs=($(printf "%s\n" "${needed_pkgs[@]}" | sort -u))

            # Install missing dev packages
            to_install=()
            for pkg in "${needed_pkgs[@]}"; do
              if ! pkg-config --exists "$pkg"; then
                to_install+=("${PKG_MAP[$pkg]}")
              fi
            done
            if [ ${#to_install[@]} -gt 0 ]; then
              echo "Installing missing packages: ${to_install[*]}"
              sudo apt-get install -y --no-install-recommends "${to_install[@]}"
            fi

            # Collect include dirs
            INCLUDE_DIRS=()
            [ -d "$project/include" ] && INCLUDE_DIRS+=("-I$project/include")
            [ -d "include" ] && INCLUDE_DIRS+=("-Iinclude")

            OUTBIN="bin/$project/$project"
            PKG_FLAGS=""
            if [ ${#needed_pkgs[@]} -gt 0 ]; then
              PKG_FLAGS="$(pkg-config --cflags --libs ${needed_pkgs[*]})"
            fi

            echo "Compiling $project..."
            if g++ -std=c++17 -Wall "${SRCFILES[@]}" "${INCLUDE_DIRS[@]}" $PKG_FLAGS -o "$OUTBIN"; then
              SUCCEEDED+=("$project")
            else
              echo "g++ failed for $project"
              FAILED+=("$project")
            fi
          done < <(find . -maxdepth 1 -mindepth 1 -type d -print0)

          echo
          echo "=== Build Summary ==="
          if [ ${#SUCCEEDED[@]} -gt 0 ]; then
            echo "Succeeded projects: ${SUCCEEDED[*]}"
          else
            echo "No projects succeeded."
          fi
          if [ ${#FAILED[@]} -gt 0 ]; then
            echo "Failed projects: ${FAILED[*]}"
            exit 1
          fi

      - name: Upload compiled binaries
        uses: actions/upload-artifact@v4
        with:
          name: compiled-projects-${{ github.run_number }}
          path: bin
          if-no-files-found: error
