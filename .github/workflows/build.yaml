name: Build and Bundle C++ Projects

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends build-essential pkg-config libgtk-3-dev libvte-2.91-dev zip

    - name: Compile & package projects
      shell: bash
      run: |
        set -eu -o pipefail

        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        ZIP_NAME="compiled_projects_${TIMESTAMP}.zip"

        mkdir -p bin
        FAILED=""
        BUILT_ANY=0

        # Loop over top-level directories (exclude .github, bin)
        for dir in $(find . -maxdepth 1 -mindepth 1 -type d | sed 's|^\./||'); do
          [ "$dir" = ".github" ] && continue
          project=$(basename "$dir")
          mkdir -p "bin/$project"

          echo "=== Processing project: $project ==="

          # Build using Makefile if present
          if [ -f "$dir/Makefile" ]; then
            echo "Building $project using Makefile..."
            if ! make -C "$dir"; then
              echo "Make failed for $project"
              FAILED="$FAILED $project"
              continue
            fi
            # Move all executables in project root to bin/
            find "$dir" -maxdepth 1 -type f -executable -exec mv {} "bin/$project/" \;

          else
            # Compile all .cpp files recursively
            CPP_FILES=$(find "$dir" -type f -name "*.cpp")
            if [ -z "$CPP_FILES" ]; then
              echo "No .cpp files found for $project"
              FAILED="$FAILED $project"
              continue
            fi
            OUT_BIN="bin/$project/$project"
            echo "Compiling $project from source..."
            if ! g++ -std=c++17 -Wall $CPP_FILES -o "$OUT_BIN" $(pkg-config --cflags --libs gtk+-3.0 vte-2.91); then
              echo "g++ failed for $project"
              FAILED="$FAILED $project"
              continue
            fi
          fi

          BUILT_ANY=1
        done

        if [ "$BUILT_ANY" -eq 0 ]; then
          echo "ERROR: No binaries were produced for any project."
          echo "Failed projects:$FAILED"
          exit 1
        fi

        # Create a single zip containing bin/
        echo "Creating zip $ZIP_NAME ..."
        zip -r "$ZIP_NAME" bin -x "*/.git/*" >/dev/null

        echo "Built and packaged into $ZIP_NAME"
        ls -R bin || true
        ls -l "$ZIP_NAME"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: compiled-projects-${{ github.run_number }}
        path: compiled_projects_*.zip
        if-no-files-found: error
