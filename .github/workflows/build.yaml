name: Build C++ Projects

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 1: Hard-coded core dependencies
      - name: Install base dependencies
        run: |
          echo "::group::üì¶ Installing base dependencies"
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config \
            libgtk-3-dev \
            libvte-2.91-dev \
            libgtksourceview-4-dev
          echo "::endgroup::"

      # Step 2: Scan Makefiles for pkg-config modules
      - name: Install dependencies from Makefiles
        run: |
          set -eu

          echo "::group::üîç Scanning Makefiles for pkg-config modules"
          MODULES=$(grep -h -o "pkg-config[^)]*)" $(find . -name Makefile) \
            | sed -E 's/.*pkg-config[^ ]* (.*)\)/\1/' \
            | tr ' ' '\n' | sort -u || true)

          if [ -z "$MODULES" ]; then
            echo "‚ö†Ô∏è  No pkg-config modules detected in Makefiles"
            echo "::endgroup::"
            exit 0
          fi

          echo "üì¶ Detected pkg-config modules:"
          for m in $MODULES; do echo "  - $m"; done
          echo "::endgroup::"

          PKGS=()
          for m in $MODULES; do
            case "$m" in
              gtk+-3.0) PKGS+=("libgtk-3-dev") ;;
              vte-2.91) PKGS+=("libvte-2.91-dev") ;;
              gtksourceview-4) PKGS+=("libgtksourceview-4-dev") ;;
              *) echo "‚ö†Ô∏è  Unknown module: $m (no apt mapping)" ;;
            esac
          done

          if [ ${#PKGS[@]} -gt 0 ]; then
            echo "::group::üì¶ Installing extra packages"
            echo "Will install: ${PKGS[*]}"
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends "${PKGS[@]}"
            echo "::endgroup::"
          else
            echo "‚ö†Ô∏è  No additional packages to install"
          fi

      - name: Compile projects with summary
        shell: bash
        run: |
          set -eu -o pipefail

          rm -rf bin
          mkdir -p bin

          SUCCEEDED=()
          FAILED=()
          SKIPPED=()

          RED="\033[0;31m"
          GREEN="\033[0;32m"
          YELLOW="\033[0;33m"
          NC="\033[0m"

          while IFS= read -r -d '' dir; do
            dir="${dir#./}"
            [[ "$dir" = ".github" || "$dir" = "bin" || "$dir" = ".git" ]] && continue

            project="$dir"
            echo "::group::üî® Building project: $project"

            mapfile -d '' -t CPP_FILES < <(find "$dir" -type f -name '*.cpp' -print0 || true)

            if [ "${#CPP_FILES[@]}" -eq 0 ] && [ ! -f "$dir/Makefile" ]; then
              echo -e "‚ö†Ô∏è  ${YELLOW}Skipping${NC}: $project (no .cpp files or Makefile)"
              SKIPPED+=("$project")
              echo "::endgroup::"
              continue
            fi

            mkdir -p "bin/$project"

            if [ -f "$dir/Makefile" ]; then
              echo "üõ†Ô∏è  Building with Makefile..."
              if make -C "$dir"; then
                find "$dir" -maxdepth 1 -type f -executable -exec mv -t "bin/$project" -- {} + 2>/dev/null || true
                echo -e "‚úÖ ${GREEN}Build succeeded${NC}: $project"
                SUCCEEDED+=("$project")
              else
                echo -e "‚ùå ${RED}Build failed${NC}: $project"
                FAILED+=("$project")
              fi
            else
              echo "üõ†Ô∏è  Compiling sources directly..."
              OUT_BIN="bin/$project/$project"

              readarray -d '' -t HEADER_DIRS < <(find "$dir" -type f \( -name '*.h' -o -name '*.hpp' \) -printf '%h\0' 2>/dev/null | sort -uz || true)

              INCLUDES_ORDER=()
              add_if_missing() {
                local candidate="$1"
                for e in "${INCLUDES_ORDER[@]}"; do
                  [ "$e" = "$candidate" ] && return 0
                done
                INCLUDES_ORDER+=("$candidate")
              }

              [ -d "$dir/include" ] && add_if_missing "$dir/include"
              [ -d "./include" ] && add_if_missing "$(realpath -m ./include)"
              for hdr in "${HEADER_DIRS[@]}"; do
                [ -z "$hdr" ] && continue
                hdr_real=$(realpath -m "$hdr")
                add_if_missing "$hdr_real"
              done

              INCLUDES_FLAGS=()
              for p in "${INCLUDES_ORDER[@]}"; do
                INCLUDES_FLAGS+=("-I" "$p")
              done

              if g++ -std=c++17 -Wall \
                "${INCLUDES_FLAGS[@]}" \
                "${CPP_FILES[@]}" \
                -o "$OUT_BIN" \
                $(pkg-config --cflags --libs gtk+-3.0 vte-2.91 gtksourceview-4); then
                echo -e "‚úÖ ${GREEN}Compiled successfully${NC}: $project"
                SUCCEEDED+=("$project")
              else
                echo -e "‚ùå ${RED}g++ compilation failed${NC}: $project"
                FAILED+=("$project")
              fi
            fi

            echo "::endgroup::"
          done < <(find . -maxdepth 1 -mindepth 1 -type d -print0)

          echo
          echo "=== üìä Build Summary ==="
          [ ${#SUCCEEDED[@]} -gt 0 ] && echo -e "‚úÖ ${GREEN}Succeeded:${NC} ${SUCCEEDED[*]}"
          [ ${#FAILED[@]} -gt 0 ] && echo -e "‚ùå ${RED}Failed:${NC} ${FAILED[*]}"
          [ ${#SKIPPED[@]} -gt 0 ] && echo -e "‚ö†Ô∏è  ${YELLOW}Skipped:${NC} ${SKIPPED[*]}"

          if [ ${#FAILED[@]} -gt 0 ]; then
            exit 1
          fi

          echo
          echo "üìÇ Built projects folder structure:"
          ls -R bin || true

      - name: Upload compiled binaries
        uses: actions/upload-artifact@v4
        with:
          name: compiled-projects-${{ github.run_number }}
          path: bin
          if-no-files-found: error
